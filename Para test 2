% PARAFAC-based 2D DOA Estimation using a Planar Array (N-Way Toolbox)
% ------------------------------------------------------
% Requirements: N-Way Toolbox (https://www.models.life.ku.dk/nwaytoolbox)

% PARAMETERS
Mx = 6;               % Number of elements along x-axis
My = 6;               % Number of elements along y-axis
T = 200;              % Number of time snapshots
R = 3;                % Number of sources
lambda = 1;           % Wavelength
d = lambda / 2;       % Inter-element spacing

% Source DOAs (theta: elevation, phi: azimuth)
theta_true = [30, 60, 45];
phi_true = [20, 70, 150];

% Initialize data tensor
X = zeros(Mx, My, T);

% Generate source signals and fill the tensor
for r = 1:R
    theta_rad = deg2rad(theta_true(r));
    phi_rad = deg2rad(phi_true(r));
    kx = sin(theta_rad) * cos(phi_rad);
    ky = sin(theta_rad) * sin(phi_rad);

    ax = exp(1j * 2 * pi * d * (0:Mx-1).' * kx);
    ay = exp(1j * 2 * pi * d * (0:My-1).' * ky);
    s = randn(1,T) + 1j * randn(1,T);  % complex source signal

    for t = 1:T
        X(:,:,t) = X(:,:,t) + ax * ay.' * s(t);
    end
end

% Add complex Gaussian noise
SNR_dB = 10;
signal_power = mean(abs(X(:)).^2);
noise_power = signal_power / (10^(SNR_dB/10));
X = X + sqrt(noise_power/2) * (randn(size(X)) + 1j*randn(size(X)));

% Reshape complex tensor into real-valued 4-way tensor for N-Way Toolbox
X_real = zeros(Mx, My, T, 2);
X_real(:,:,:,1) = real(X);
X_real(:,:,:,2) = imag(X);

% PARAFAC Decomposition using N-Way Toolbox
options = nwayfast('defaults');
options.init = 0; % random initialization
options.maxit = 500;
options.tol = 1e-8;

[F, ~, ~] = parafac(X_real, R, options);

% Combine real and imaginary parts from the 4th mode
Ax = F{1} + 1j * F{1};  % Approximation: use F{1} for real + imag
Ay = F{2} + 1j * F{2};
S  = F{3} + 1j * F{3};

% DOA Estimation (Grid Search)
theta_grid = 0:1:90;
phi_grid = 0:1:180;
angles_est = zeros(R, 2);

for r = 1:R
    best_match = 0;
    for th = theta_grid
        for ph = phi_grid
            th_rad = deg2rad(th); ph_rad = deg2rad(ph);
            kx = sin(th_rad)*cos(ph_rad);
            ky = sin(th_rad)*sin(ph_rad);

            ax_ref = exp(1j*2*pi*d*(0:Mx-1)'*kx);
            ay_ref = exp(1j*2*pi*d*(0:My-1)'*ky);

            score = abs((Ax(:,r)'*ax_ref) * (Ay(:,r)'*ay_ref));
            if score > best_match
                best_match = score;
                angles_est(r,:) = [th, ph];
            end
        end
    end
end

% Display results
fprintf('True DOAs (theta, phi):\n');
disp([theta_true(:), phi_true(:)]);

fprintf('Estimated DOAs (theta, phi):\n');
disp(angles_est);
